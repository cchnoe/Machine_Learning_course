{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "z2U0z5NE7bli"
   },
   "source": [
    "## Cargando nuestra sesion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 121
    },
    "colab_type": "code",
    "id": "6P5VGRP47bll",
    "outputId": "a13579b3-ee22-4cec-97a7-2a6e577c88d4"
   },
   "outputs": [],
   "source": [
    "import dill\n",
    "dill.load_session('Titanic01.db')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "00oObowA7bls",
    "outputId": "05f2bcd1-48f6-45cc-c039-7cc81bc94d68"
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Verifiquemos que nadie no ha reemplazado sus features. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "vCEfl7U97bly"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Wbe0Pv6s7bl5"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dIMfmROW7bmC"
   },
   "outputs": [],
   "source": [
    "train['P_embarque'].fillna(train['P_embarque'].mode()[0],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2260e69ee48>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ms.matrix(train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tenemos que importar los id para poder summitear al final. Porque recuerda que los eliminamos en la anterior sesion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "summit_id = pd.read_csv('https://raw.githubusercontent.com/HackSpacePeru/Datasets_intro_Data_Science/master/Titanic/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "BpbdcLzC7bmJ"
   },
   "source": [
    "## Recordando el problema y los métodos aprendidos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "vHQ-aO7Q7bmL",
    "outputId": "a4579220-114e-4356-c50c-eb59e0f856ce"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "RfbKN-M67bmY",
    "outputId": "ddd8b5a8-9561-46b6-c7ef-959e69dac585"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YieYJ7kO7bmc"
   },
   "source": [
    "# Machine Learning\n",
    "\n",
    "- Hoy haremos nuestros primeros modelos de machine learning.Nos centraremos específicamente en tres modelos: Regresión Logística, Árboles de Decisión y RandomForest. A lo largo de la clase iteraremos entre código y teoría. Así que, empecemos!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "IUjvnd6m7bme"
   },
   "source": [
    "Recuerda que tenemos dos conjuntos de datos: **train** y **summit**. Esto es porque el **objetivo** es hacer un modelo de aprendizaje automático (machine learning) para poder postearlo en la competencia de Kaggle. Específicamente haremos un **modelo suppervisado** que nos prediga si el pasajero **sobrevive** o **no sobrevive**. Se va a dividir la data porque cierto grupo de datos (train) nos servirá para **entrenar** el modelo y el otro grupo de datos para **testearlo** (crearemos otro grupo test). Luego de hacer el respectivo testeo del modelo podremos mandarlo a producción, es decir, que interactúe con data real.    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "FygbVd8B7bmf",
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Tendremos que hacer nuestras variables predictoras X y nuestra variable objetivo Y\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Fai2F3ez7bmk"
   },
   "source": [
    "### Dividiremos nuestra data para poder entrenar y evaluar nuestros modelos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Xf85e2U57bml"
   },
   "outputs": [],
   "source": [
    "#Dense cuenta de que se importa desde model_selection, porque efectivamente sirve para poder seleccionar nuestros modelos\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "from sklearn.metrics import accuracy_score #Vamos a medir el accuracy de nuestro modelo... "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "JXvtWRUr7bmw"
   },
   "outputs": [],
   "source": [
    "#Dividing the data before tuning the model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "U7xCk7Rb7bm1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Para el X_train: (623, 10) y para el y_train (623,)\n",
      "Para el X_test: (268, 10) y para el y_test (268,)\n"
     ]
    }
   ],
   "source": [
    "#Explorar los nuevos datos partidos\n",
    "print('Para el X_train:', X_train.shape, 'y para el y_train',y_train.shape)\n",
    "print('Para el X_test:',X_test.shape,'y para el y_test',y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "wnYO5zYi7bnA"
   },
   "source": [
    "- Los pasos para entrenar un modelo son simples: Fitear y predecir. Nada más. Luego haremos algunas métricas para poder ver qué tan bien nos ha servido nuestro clasificador. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5-he_32h7bnC"
   },
   "source": [
    "### Regresión Logística con Python. \n",
    "\n",
    "La famosa Regresión Logística es el modelo más básico (y no le quita que aún así sea poderoso y el mejor en algunos casos) de los modelos disponibles dentro de la librería scikit learn. Veamos como podemos ponerlo a prueba. Pero antes, recordemos y **veamos un poco de teoría**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 101
    },
    "colab_type": "code",
    "id": "tX1aYzOf7bnE",
    "outputId": "2dafb6bf-42e3-4feb-8df8-073a59a34dc9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "#Simple Logistic Regression:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "2reNrFQs7bnM"
   },
   "source": [
    "- Una vez hecho el fiteo de los datos. Tenemos nuestro modelo **almacenado** y **entrenado** en la variable **LogReg** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "sZqIt3Qc7bnU"
   },
   "outputs": [],
   "source": [
    "#show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "IxQfzto9-X6j"
   },
   "source": [
    "- Recuerda que la función **accuracy_score** nos va a decir el porcentaje de predicción de nuestro modelo, es decir, cuánto del total de registros nos está prediciendo bien. Esta función nos va a aceptar como primer parámetro las verdaderas predicciones y como segundo parámetro las predicciones hechas por nuestro modelo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "pube4NDo7bnj",
    "outputId": "467bf767-88b9-4e60-a890-700e0a5b8d54",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El accuracy para mi primero modelo es :0.83208955\n"
     ]
    }
   ],
   "source": [
    "print('El accuracy para mi primero modelo es :{0:.8f}'.format(accuracy_score(y_test,logreg_pred)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "qhwNF5TN7bnp"
   },
   "source": [
    "#### Intentaremos hacer un poquito mejor nuestro modelo:  Recuerda que hemos sacado un 83.208% en este caso. A lo mejor tu modelo bota un resultado diferente, y eso es normal si es que tu data estaba transformada de manera diferente.\n",
    "\n",
    "\n",
    "- Lo chévere de nuestro modelo de Regresión Logística es que nos permite ver las probabilidades que ha generado con cada fila de datos. Es decir, nos dice qué tan probable es (según nuestro modelo) que el pasajero N haya sobrevivido a la catástrofe del Titanic. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 402
    },
    "colab_type": "code",
    "id": "kQcNpb037bnu",
    "outputId": "70aa48ea-3672-449b-c98b-22e29dd56bb2"
   },
   "outputs": [],
   "source": [
    "#Quiero saber qué coeficientes de la ecuación logística mi modelo me está botando... \n",
    "\n",
    "#Esto también es una forma de decir qué tanto mi modelo valora cada variable predictora\n",
    "df_weights = pd.DataFrame({'feature':X_train.columns.values, 'beta': np.round(logreg.coef_[0],4) })\n",
    "df_weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VYsk9g9t7bn1"
   },
   "outputs": [],
   "source": [
    "#Predict proba\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Puntos de corte"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "wX4qOlK5C64W"
   },
   "source": [
    "- Con el siguiente gráfico podemos evaluar si efectivamente nuestro punto de corte por default sería el mejor. Lamentablemente, scikitlearn no tiene un parámetro que nos ayude a optimizar nuestro punto de corte, sino tendremos que hacerlo a mano. Pero descuida. Esto no es tan difícil. Veremos:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 421
    },
    "colab_type": "code",
    "id": "-9j0CI_e7boE",
    "outputId": "8b8b2ea0-0071-4f32-be15-fd4b2974f64f",
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x226105892c8>]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "lista_de_accuracy = [] #Esta será la lista donde meteré todas mis variables\n",
    "for punto_de_corte in range(0,100):  #Itero por sobre todos los puntos de corte posibles (nota que estoy iterando solamente por sobre enteros)\n",
    "    pred_0_1 = [1 if x >= punto_de_corte/100 else 0 for x in proba_pred_test] #Para cada x en la variable donde están mis probabilidades, dame 1 si este x es > punto_de_corte \n",
    "    lista_de_accuracy.append(accuracy_score(y_test, pred_0_1)) #Agrega el accuracy_score resultante para cada punto de corte por el que hemos iterado\n",
    "\n",
    "xs = [x/100 for x in range(0,100)] #Una lista de en qué porcentaje de la iteración vamos\n",
    "ys = lista_de_accuracy # La lista de los accuracys\n",
    "\n",
    "plt.figure(figsize=(8,6)) #Es para modificar el tamaño del gráfico\n",
    "plt.grid(True) #Para que nuestro gráfico tenga esa rayitas y nos ubiquemos mejor\n",
    "plt.title('Esta es nuestra curva punto de corte vs accuracy') #El título del gráfico\n",
    "plt.xlabel('Punto de corte') #El título del eje X\n",
    "plt.ylabel('Accuracy') #El título del eje Y\n",
    "plt.plot(xs, ys) #Ploteamos nuestro gráfico con las variables que antes hemos creado"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "r7WDgnvV7boT"
   },
   "source": [
    "-  Cuál es entonces el punto de corte óptimo para maximizar nuestro accuracy? Ahora tendremos que **probar el modelo con ese punto de corte** \n",
    "\n",
    "Para esto haremos una lista donde podamos redondear las probabilidades que tenemos que son mayores a nuestro nuevo punto de corte"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 235
    },
    "colab_type": "code",
    "id": "64aEKjAS7boW",
    "outputId": "31f67340-b499-4f6b-ad9c-22b9a4f959fe"
   },
   "outputs": [],
   "source": [
    "#List comprehensions, redondeando probabilidades. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "vNTXpOii7boy",
    "outputId": "e469f91d-ed60-437d-c6fd-980e5f760ad3"
   },
   "outputs": [],
   "source": [
    "print('El accuracy para mi primer modelo es :{0:.8f}'.format(accuracy_score(y_test,logreg_pred)))\n",
    "accuracy_score(y_test,predicciones_nuevo_pc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "EGNyONMo7bo-"
   },
   "source": [
    "### Clasificador de Árbol de Decisión (Decision Tree Classifier) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "g10TzX1eHVMQ"
   },
   "source": [
    "Los árboles de decisión **son los modelos más básicos de toda una gama de modelos.** A pesar de que sean algo básicos, del concepto de cómo están organizados va a partir todos los demás subsiguientes modelos que vamos a ver. Un ejemplo de esto son los siguientes Random Forest que veremos en esta clase o los AdaBoost, CatBoost, XGBoost y etc que veremos en siguientes clases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "_kg_hide-output": true,
    "colab": {},
    "colab_type": "code",
    "id": "sHs8mMG_7bpE"
   },
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import accuracy_score #Para poder medir mi accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 118
    },
    "colab_type": "code",
    "id": "Qg7nkjl17bpK",
    "outputId": "15669733-e8ad-408b-f67c-9c364f79e736"
   },
   "outputs": [],
   "source": [
    "#Entreno mi árbol\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "KrmUfuoc7bpP",
    "outputId": "fb05e2d1-81e7-451c-e290-b2169b78fe00"
   },
   "outputs": [],
   "source": [
    "#Mido sus resultados"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pequeña optimizacion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "OyYJQxh7Hsdc"
   },
   "source": [
    "**¿Qué es una optimización de hiperparámetros?** Los hiperparámetros en ml son variables que están dentro del modelo y que pueden tomar diferentes valores. Estos diferentes valores son usualmente se toman en cuenta para poder darle mejor forma al modelo según los datos que tengas y **es necesario conocer la teoría que hay detrás de un modelo** para que puedas optimizarlos con mayor facilidad. Vamos a ver en la teoría cómo funcionan los árboles de decisión y qué significan sus hiperparámetros."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "oqt1avXi7bpX"
   },
   "source": [
    "- Aún podemos mejorar nuestro árbol testeando **solo uno** de sus hiperparámetros:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 302
    },
    "colab_type": "code",
    "id": "haqZb9Lk7bpY",
    "outputId": "1740ef7d-5e2c-45a2-8ff9-92bdf911338e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mi árbol da un accuracy de: 0.7873134328358209 cuando su max_depth es:  1\n",
      "Mi árbol da un accuracy de: 0.8022388059701493 cuando su max_depth es:  2\n",
      "Mi árbol da un accuracy de: 0.832089552238806 cuando su max_depth es:  3\n",
      "Mi árbol da un accuracy de: 0.8059701492537313 cuando su max_depth es:  4\n",
      "Mi árbol da un accuracy de: 0.8059701492537313 cuando su max_depth es:  5\n",
      "Mi árbol da un accuracy de: 0.7873134328358209 cuando su max_depth es:  6\n",
      "Mi árbol da un accuracy de: 0.7910447761194029 cuando su max_depth es:  7\n",
      "Mi árbol da un accuracy de: 0.7835820895522388 cuando su max_depth es:  8\n",
      "Mi árbol da un accuracy de: 0.7985074626865671 cuando su max_depth es:  9\n",
      "Mi árbol da un accuracy de: 0.8097014925373134 cuando su max_depth es:  10\n",
      "Mi árbol da un accuracy de: 0.7947761194029851 cuando su max_depth es:  11\n",
      "Mi árbol da un accuracy de: 0.8022388059701493 cuando su max_depth es:  12\n",
      "Mi árbol da un accuracy de: 0.7947761194029851 cuando su max_depth es:  13\n",
      "Mi árbol da un accuracy de: 0.7761194029850746 cuando su max_depth es:  14\n",
      "Mi árbol da un accuracy de: 0.7798507462686567 cuando su max_depth es:  15\n",
      "Mi árbol da un accuracy de: 0.7649253731343284 cuando su max_depth es:  16\n",
      "Mi árbol da un accuracy de: 0.7761194029850746 cuando su max_depth es:  17\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,18):\n",
    "    tree_clf = DecisionTreeClassifier(max_depth=i)\n",
    "    tree_clf.fit(X_train,y_train)\n",
    "    y_pred = tree_clf.predict(X_test)\n",
    "    \n",
    "    print(\"Mi árbol da un accuracy de:\", accuracy_score(y_test,y_pred), \"cuando su max_depth es: \", i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ZEzPtLOM7bpd"
   },
   "source": [
    "###### Entonces vamos a elegir el resultado que haga a nuestro modelo algo mejor :) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 118
    },
    "colab_type": "code",
    "id": "atgM4Ls87bpe",
    "outputId": "1e661ab9-bf23-4309-a9b8-ad1ceaac5109"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=3,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree_clf = DecisionTreeClassifier(max_depth=3)\n",
    "tree_clf.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "rWEIxyqI7bpq"
   },
   "outputs": [],
   "source": [
    "y_pred_tree = tree_clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "BhKZgWvM7bpv"
   },
   "source": [
    "## Matriz de confusión:\n",
    "\n",
    "Cuenta el número de veces en que las predicciones hechas caen en **error tipo 1** y **error tipo 2**. Así como también cuenta las buenas predicciones que ha hecho nuestro modelo. \n",
    "\n",
    "- **Error tipo1**: De manera errónea se predijo 1 cuando en realidad es 0. Es decir, nuestro algoritmo nos dijo que una personas sobrevivió cuando en realidad estaba muerta.\n",
    "\n",
    "- **Error tipo2**: De manera errónea se predijo 0 cuando en realidad es 1. Nuestro modelo nos dice que una persona ha muerto cuando en realidad ha sobrevivido.\n",
    "\n",
    "- **True Positive(Verdadero Positivo)**: Nos dice que es 1 cuando efectivamente es 1. Predice de manera correcta la supervivencia.\n",
    "\n",
    "- **False Negative (Falso Negativo)**: Nos dice que es 0 cuando de verdad es 0. Cuántos casos predice de manera correcta la no-supervivencia. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 476
    },
    "colab_type": "code",
    "id": "Hci1hlDk7bpw",
    "outputId": "339d08a9-b8c2-4c08-f713-5334ba745633"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plotearemos una matriz de confusión\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "conf_matrix = confusion_matrix(y_test,y_pred_tree) #Creo la matriz de confusón así de fácil\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "\n",
    "plt.title('Mi Primer Arbol de Decisión \\n Con accuracy de :{0:.3f}'.format(accuracy_score(y_test, y_pred_tree)))\n",
    "ax=sns.heatmap(conf_matrix, annot = True, annot_kws={\"size\": 10}, fmt=\".1f\")\n",
    "ax.set_ylim((0,2))\n",
    "plt.xlabel('Nuestra data dice que')\n",
    "plt.ylabel('Nuestro algoritmo nos dice que')\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "1pL8tT8-7bp6",
    "outputId": "40cbd00d-89e6-419c-8e2e-f57cd512215f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "107"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Confirmemos efectivamente lo que nuestra data nos dice:\n",
    "y_test[y_test == 1].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "eex9ivD27bp_"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "JmwTQi627bqH"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "mgWU-i2H7bqM"
   },
   "source": [
    "## Una evolución de los Árboles de Decisión: Bosques Aleatorios (Random Forest)\n",
    "\n",
    "- Un RandomForest es un agregado de árboles de decisiones, donde cada uno de estos árboles se entrena con diferentes partes de la data escogida de manera aleatoria. Luego de tener una cierta cantidad de árboles (500 en el ejemplo) se hace una votación para hacer cada predicción.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "HV3Mehzy7bqN"
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "Gy2lWmLK7bqa",
    "outputId": "c440f9a1-5ddf-4def-e3f6-99a87906ccc9"
   },
   "outputs": [],
   "source": [
    "#Random Forest Classifier model. Con sus hiperparámetros. \n",
    "\n",
    "#Prediciendo los valores.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "12bTPeLl7bqo"
   },
   "source": [
    "- También sacaremos matriz de confusión para este caso: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 476
    },
    "colab_type": "code",
    "id": "KLhPOeeZ7bqt",
    "outputId": "13c30334-05b5-4aed-bca9-655662f9806f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "conf_matrix = confusion_matrix(y_test,y_pred_rnd) #Creo la matriz de confusón así de fácil\n",
    "\n",
    "plt.figure(figsize=(10,7))\n",
    "\n",
    "plt.title('Mi Primer Arbol de Decisión \\n Con accuracy de :{0:.3f}'.format(accuracy_score(y_test, y_pred_rnd)))\n",
    "ax=sns.heatmap(conf_matrix, annot = True, annot_kws={\"size\": 18}, fmt=\".1f\")\n",
    "ax.set_ylim((0,2))\n",
    "plt.xlabel('Nuestra data nos ha dicho que')\n",
    "plt.ylabel('Nuestro algoritmo dice que')\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "XCYtm_Gq7bq6"
   },
   "source": [
    "- Una de las mayores ventajas de entrenar un árbol de decisión y mejor aún un random forest, es que podemos ver cuáles son nuestras variables más importantes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 730
    },
    "colab_type": "code",
    "id": "dVwasBDB7bq7",
    "outputId": "b7ce40b0-c416-4b4e-b288-ab5810734e7e"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Saquemos los valores más importantes \n",
    "importances = rnd_clf.feature_importances_\n",
    "cols = X_train.columns\n",
    "plt.figure(figsize=(8,12))\n",
    "indices = np.argsort(importances)\n",
    "plt.title('Feature Importances')\n",
    "plt.barh(range(len(indices)), importances[indices], align = 'center')\n",
    "plt.yticks(range(len(indices)),[cols[i] for i in indices])\n",
    "plt.xlabel('Relative Importance')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8rJP-4Pe7brB"
   },
   "source": [
    "- Acá es cuando yo veo y evalúo si puedo o debo crear más features para mejorar el modelo o no."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "6j0DBFok7brC",
    "outputId": "5e47cbd6-ea50-404d-d92c-7d2455925b33"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8283582089552238"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_2 = X_train.drop(['Viaja_solo','es_niño'],axis=1)\n",
    "rnd_clf.fit(X_train_2,y_train)\n",
    "rnd_clf.score(X_test.drop(['Viaja_solo','es_niño'],axis=1),y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Qx0eGT0q7brK"
   },
   "source": [
    "### Tarea: Agregando rápidamente otro modelo: SupportVectorClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "zCG-cycr7brM",
    "outputId": "4040cfee-3bf5-466d-aef0-9e13d859299b"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "aiIfwYek7brR"
   },
   "source": [
    "### Curvas ROC (Receiver Operator Characteristic) ¿Qué modelo tiene un mejor performance?\n",
    "\n",
    "- Nos resume de manera fácil cómo se está comportando nuestro algoritmo al clasificar nuestras categorías.\n",
    "\n",
    "- En el eje X se grafica la sensitividad (ratio de **True Positives**) y en el eje Y se grafica (**1 - especificidad**) .\n",
    "\n",
    "- Recuerda que el punto en la esquina superior derecha nos dirá que todos los casos negativos han sido bien clasificados, pero también que todos los casos negativos han sido mal clasificados. (más sensitividad y alta especificidad)\n",
    "\n",
    "- **EN RESUMEN!** La curva ROC resume todas las matrices de confusión dados los diferentes puntos de corte de tu algoritmo de clasificación. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 101
    },
    "colab_type": "code",
    "id": "c0lJU8hMNMk4",
    "outputId": "a95f61f7-20ab-4729-9b8c-e568f7cd5a34"
   },
   "source": [
    "#### AUC (Area under the  Curve) Es la area bajo la curva ROC, te resume el gráfico de la ROC en un solo número."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "M5grXbi77brS"
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import roc_auc_score \n",
    "\n",
    "clasificadores = [logreg, tree_clf, rnd_clf] #Hacemos una lista de clasificadores\n",
    "\n",
    "tabla_resultados = pd.DataFrame(columns=['clasificadores', 'fpr','tpr','auc']) #Haremos un dataframe (tabla) para almacenar mis métricas\n",
    "\n",
    "for cls in clasificadores: #Para cada clasificador\n",
    "    model = cls.fit(X_train, y_train) #Entrenalo\n",
    "    yproba = model.predict_proba(X_test)[:,1] #Sacale las probabilidades\n",
    "    \n",
    "    fpr, tpr, _ = roc_curve(y_test,  yproba) #Danos su curva roc\n",
    "    auc = roc_auc_score(y_test, yproba) #Y su métrica auc\n",
    "    \n",
    "    tabla_resultados = tabla_resultados.append({'clasificadores':None,\n",
    "                                      'fpr':fpr, \n",
    "                                        'tpr':tpr, \n",
    "                                        'auc':auc}, ignore_index=True) #Así ordenamos nuestra data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 195
    },
    "colab_type": "code",
    "id": "cnJ6aUXF7bra",
    "outputId": "31dd8816-ecb8-47cf-9b54-a5b7e02cd582"
   },
   "outputs": [],
   "source": [
    "#Acá simplemente pondremos nuestros clasificadores como index\n",
    "tabla_resultados['clasificadores'] = ['RegresionLogistica','ArbolDecision','RandomForest']\n",
    "tabla_resultados.set_index('clasificadores', inplace=True)\n",
    "tabla_resultados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_kg_hide-output": true,
    "colab": {},
    "colab_type": "code",
    "id": "9SULndfi7brf",
    "outputId": "765180f4-d93e-4b6d-d755-181464b8aebf"
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(8,6))\n",
    "\n",
    "for i in tabla_resultados.index:\n",
    "    plt.plot(tabla_resultados.loc[i]['fpr'], \n",
    "             tabla_resultados.loc[i]['tpr'], \n",
    "             label=\"{}, AUC={:.3f}\".format(i, tabla_resultados.loc[i]['auc']))\n",
    "    \n",
    "plt.plot([0,1], [0,1], color='orange', linestyle='--')\n",
    "\n",
    "plt.xticks(np.arange(0.0, 1.1, step=0.1))\n",
    "plt.xlabel(\"Falsos Positivos\", fontsize=15)\n",
    "\n",
    "plt.yticks(np.arange(0.0, 1.1, step=0.1))\n",
    "plt.ylabel(\"Verdaderos Positivos\", fontsize=15)\n",
    "\n",
    "plt.title('Análisis de la curva ROC', fontweight='bold', fontsize=15)\n",
    "plt.legend(prop={'size':12}, loc='lower right')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "_kg_hide-output": true,
    "colab_type": "text",
    "collapsed": true,
    "id": "arwflAvN7bsF"
   },
   "source": [
    "## Haciendo submit a mis predicciones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def csv_a_submitir(model = logreg, name = 'csv_a_submitir.csv'):\n",
    "    pred = model.predict(summit)\n",
    "    submissions =  pd.DataFrame({'PassengerId':summit_id['IdPasajero'],'Survived': pred})\n",
    "    submissions = submissions.set_index('PassengerId')\n",
    "    submissions.to_csv(name)\n",
    "    print('Se ha generado un csv con el nombre: ', name)\n",
    "    return submissions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "vq_xnBc27bsK"
   },
   "outputs": [],
   "source": [
    "#Falta hacer función que nos permita hacer un csv con la forma que nos pide la competencia de kaggle.\n",
    "preds = logreg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "EKPh-hAr7bsO"
   },
   "outputs": [],
   "source": [
    "sub = pd.read_csv('https://raw.githubusercontent.com/HackSpacePeru/Datasets_intro_Data_Science/master/Titanic/gender_submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "m3F8oEEW7bsV"
   },
   "outputs": [],
   "source": [
    "#Editamos la plantilla de submission y summiteamos. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "AMuaMhG57bsd"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zUnMzISJ7bsq"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ulxNmj7J7bsy"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "g8L_r3Oi7btF"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Titanic_parte_02_Machine_Learning01.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
